/*
Copyright Â© 2022 Lucas Afonso Kremer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"context"
	"net/http"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/lucasafonsokremer/trivy-vulnerability-exporter/pkg/exporter"
	k8s "github.com/lucasafonsokremer/trivy-vulnerability-exporter/pkg/kubernetes"
	"github.com/lucasafonsokremer/trivy-vulnerability-exporter/pkg/scanner"
	"github.com/lucasafonsokremer/trivy-vulnerability-exporter/pkg/scanner/image"
	"github.com/lucasafonsokremer/trivy-vulnerability-exporter/pkg/trivy"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/klog/v2"
)

var cfgFile string

// rootCmd represents the base command when called without any subcommands
var (
	listenAddress    string
	metricsPath      string
	kubeConfigPath   string
	scanInterval     uint32
	imageConcurrency uint8

	rootCmd = &cobra.Command{
		Use:   "trivy-vulnerability-exporter",
		Short: "A Prometheus Exporter that collects all vulnerabilities detected by aquasecurity/trivy in kubernetes clusters",
		Run: func(cmd *cobra.Command, args []string) {
			defer klog.Flush()

			var config *rest.Config
			var configErr error

			if kubeConfigPath != "" {
				config, configErr = clientcmd.BuildConfigFromFlags("", kubeConfigPath)
			} else {
				config, configErr = rest.InClusterConfig()
			}

			if configErr != nil {
				klog.Fatalf("failed to initialize kube config: %s", configErr.Error())
			}

			clientset, err := kubernetes.NewForConfig(config)
			if err != nil {
				klog.Fatalf("failed to create kubernetes client: %s", err.Error())
			}

			kclient := k8s.NewClient(clientset)
			tclient := trivy.Client{}

			scanners := []scanner.Scanner{
				image.NewImageScanner(kclient, tclient, imageConcurrency),
			}

			mux := http.NewServeMux()
			mux.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) { w.WriteHeader(http.StatusOK) })
			mux.Handle(metricsPath, promhttp.Handler())

			server := http.Server{
				Addr:    listenAddress,
				Handler: mux,
			}
			exporter := exporter.NewExporter(scanners, server)
			prometheus.MustRegister(exporter)

			ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)
			defer stop()

			klog.Info("Start trivy-vulnerability-exporter")
			exporter.Listen(ctx, time.Duration(scanInterval)*time.Second)
		},
	}
)

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	klog.InitFlags(nil)

	rootCmd.Flags().StringVar(&listenAddress, "listen-address", ":9321", "Address to listen on for web interface and telemetry")
	rootCmd.Flags().StringVar(&metricsPath, "metrics-path", "/metrics", "Path under which to expose metrics")
	rootCmd.Flags().StringVar(&kubeConfigPath, "kubeconfig", "", "Absolute path to the kubeconfig file")
	rootCmd.Flags().Uint32Var(&scanInterval, "scan-interval", 6000, "Seconds in the interval to execute to scan vulnerability")
	rootCmd.Flags().Uint8Var(&imageConcurrency, "image-scan-concurrency", 30, "The number of images to be scanned at a time in goroutine")

}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" {
		// Use config file from the flag.
		viper.SetConfigFile(cfgFile)
	} else {
		// Find home directory.
		home, err := os.UserHomeDir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".trivy-vulnerability-exporter" (without extension).
		viper.AddConfigPath(home)
		viper.SetConfigType("yaml")
		viper.SetConfigName(".trivy-vulnerability-exporter")
	}

	viper.AutomaticEnv() // read in environment variables that match

	// If a config file is found, read it in.
	if err := viper.ReadInConfig(); err == nil {
		fmt.Fprintln(os.Stderr, "Using config file:", viper.ConfigFileUsed())
	}
}
